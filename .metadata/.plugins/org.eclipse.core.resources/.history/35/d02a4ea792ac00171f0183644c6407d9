package Film;

import java.io.FileInputStream;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

import Film.Solution2.Film;

class Solution {
	static int Answer;
	static int D, W, K;
	static int[][] map;
	
	public static void main(String args[]) throws Exception	{
//		Scanner sc = new Scanner(System.in);
		Scanner sc = new Scanner(new FileInputStream("sample_input.txt"));

		int T = sc.nextInt();
		for(int test_case = 0; test_case < T; test_case++) {
			D = sc.nextInt();
			W = sc.nextInt();
			K = sc.nextInt();
			map = new int[D + 1][W + 1];
			for (int i = 1; i <= D; i++) {
				for (int j = 1; j <= W; j++) {
					map[i][j] = sc.nextInt();
				}
			}
			
			Queue<Film> queue = new LinkedList<>();
			if (passChecking(map)) {
				System.out.print("#" + (test_case+1) + " ");
				System.out.println(Answer);
				return;
			} 
			
			//검사
			//성능검사 만족-> 리턴
			//      불만족: 하나씩 덮어보기
			
			while (!queue.isEmpty()) {
				Film current = queue.remove();
				Arrays.fill(current.backup[current.depth], current.type);
				if (passChecking(current.backup)) {

					break;
				}
				//      불만족: 자식들 queue에 추가
				
				
			}
 			
			// Print the answer to standard output(screen).
			System.out.print("#" + (test_case+1) + " ");
			System.out.println(Answer);
		}
	}
	
	static boolean passChecking(int[][] map) { // 성능검사 합: t, 불합: f 리턴
		int count = 0;
		int type = -1;
		
		for (int i = 1; i <= W; i++) { // 각 col 당
			type = map[1][i];
			count = 1;
			
			for (int j = 2; j <= D; j++) { // 각 row 당
				if (map[j][i] == type) {
					count ++;
					if (count >= K) { 
						break;
					}
				} else {
					type = map[j][i];
					count = 1;
				}
			}
			
			if (count < K) {
				return false; // 해당 col에서 성능검사 불합 --> false
			}
		}
		
		return true; // 모든 col에서 성능검사 통과 --> true
	}
	
	static class Film {
		int depth;
		int type;
		int numOfFilms;
		int[][] backup = new int[D + 1][W + 1];
		
		public Film(int depth, int type, int numOfFilms, int[][] map) {
			this.depth = depth;
			this.type = type;
			this.numOfFilms = numOfFilms;
		
			for (int i = 0; i <= D; i++) {
				backup[i] = Arrays.copyOf(map[i], map[i].length);			
			}
		}
	}
}